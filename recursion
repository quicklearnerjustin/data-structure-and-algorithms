#sum of the numbers in a list
a=[1,3,5,7,9]
def sumlist(alist):
    if len(alist)==1:
        return alist[0]
    else:
        return alist[0]+sumlist(alist[1:])
    
#convert an integer to a string in any base
def convertString(a,base):
    intString='0123456789'
    if a<base:
        return intString[a]
    else:
        return convertString(a//base,base)+intString(a%base)
   
#tree
import turtle
def tree(branchLen,t):
    if branchLen>5:
        t.forward(branchLen)
        t.right(20)
        tree(branchLen-15,t)
        t.left(40)
        tree(branchLen-15,t)
        t.right(20)
        t.backward(branchLen)
        
def main():
    t=turtle.Turtle()
    myWin=turtle.Screen()
    t.left(90)
    t.up()
    t.backward(100)
    t.down()
    t.color('green')
    tree(75,t)
    myWin.exitonclick()
    
main()

#sierpinski triangle
#import turtle
def drawTriangle(points,color,myTurtle):
    myTurtle.fillcolor(color)
    myTurtle.up()
    myTurtle.goto(points[0][0],points[0][1])
    myTurtle.down()
    myTurtle.begin_fill()
    myTurtle.goto(points[1][0],points[1][1])
    myTurtle.goto(points[2][0],points[2][1])
    myTurtle.goto(points[0][0],points[0][1])
    myTurtle.end_fill()
def getMid(p1,p2):
    return((p1[0]+p2[0])/2,(p1[1]+p2[1])/2)
def sierpinski(points,degree,myTurtle):
    colormap=['red','green','yellow','white']
    drawTriangle(points,colormap[degree],myTurtle)
    if degree>0:
        sierpinski(points[0],getMid(points[0],points[1]),getMid(points[0],points[2]),degree-1,myTurtle)
        sierpinski(points[1],getMid(points[0],points[1]),getMid(points[1],points[2]),degree-1,myTurtle)
        sierpinski(points[2],getMid(points[0],points[2]),getMid(points[1],points[2]),degree-1,myTurtle)
    def main():
        myTurtle=turtle.Turtle()
        myWin=turtle.Screen()
        myPoints=[[-100,-50],[0,100],[100,-50]]
        sierpinski(myPoints,3,myTurtle)
        myWin.exitonclick()
main()

#tower of hanoi
def movetower(height,frompole,withpole,topole):
    movetower(height-1,frompole,topole,withpole) #move all but the base from the frompole to withpole via topole
    movedisk(frompole,topole) #move the base from frompole to topole
    movetower(height-1,withpole,topole,frompole) #move the other poles from withpole to topole via frompole
def movedisk(frompole,topole):
    print("moving disk from",frompole,"to",topole)
    
