#the sequential search
#if there is no order
def sequentialSearch(item,alist):
    pos=0
    Found=False
    while pos<len(alist) and not Found:
        if item==alist[pos]:
            Found=True
        else:
            pos=pos+1
        return Found
    
#if there is an ascending order
def orderedSS(item,alist):
    pos=0
    Found=False
    Stop=False
    while pos<len(alist) and not Found and not Stop:
        if item==alist[pos]:
            Found=True
        else:
            if item<alist[pos]:
                Stop=True
            else:
                pos+=1
    return Found

#the binary search
def binarySearch(item,alist):
    first=0
    last=len(alist)-1
    Found=False
    while first<=last and not Found:
        mid=(first+last)//2
        if alist[mid]==item:
            Found=True
        else:
            if alist[mid]>item:
                last=mid-1
            else:
                first=mid+1
    return Found

#recursion
def binarySearch(item,alist):
    if len(alist)==0:
        return False
    else:
        mid=len(alist)//2
        if alist[mid]==item:
            return True
        else:
            if alist[mid]>item:
                binarySearch(item,alist[:alist[mid]])
            else:
                binarySearch(item,alist[mid+1:])
                
#hashing
class Hashtable:
    def __init__(self):
        self.size=11
        self.slots=[None]*self.size
        self.data=[None]*self.size
    def put(self,key,data):
        hashvalue=self.hashfunction(key,len(self.slots))
        if self.slots[hashvalue]==None: #if there is nothing in the position
            self.slots[hashvalue]=key 
            self.data[hashvalue]=data
        else:
            if self.slots[hashvalue]==key: #replace
                self.data[hashvalue]=data
            else:
                nextslot=self.rehash(hashvalue,len(self.slots))
                while self.slots[nextslot]!=None and self.slots[nextslot]!=key:
                    nextslot=self.rehash(nextslot,len(self.slots))
                if self.slots[nextslot]==None:
                    self.slots[nextslot]=key
                    self.data[nextslot]=data
                if self.slots[nextslot]==key:
                    self.slots[nextslot]=data
        

    def get(self,key):
        startpos=hashfunction(key,len(self.slots))
        found=False
        stop=False
        pos=startpos
        while self.slots[pos]!=None and not found and not stop:
            if self.slots[pos]==key:
                found=True
                data=self.data[pos]
            else:
                pos=self.rehash(pos,len(self.slots))
                if pos==startpos:
                    stop=True
        return data
    def hashfunction(self,key,size):
        return key%size
    def rehash(self,oldhash,size):
        return (oldhash+1)%size    
    def __getitem__(self,key):
        return self.get(key)
    def __setitem__(self,key,data):
        self.put(key,data)
