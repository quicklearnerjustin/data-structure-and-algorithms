#bubble sort
def bubblesort(alist):
    for a in range(len(alist)-1,0,-1):
        for i in range(a):
            if alist[i]>alist[i+1]:
                temp=alist[i+1]
                alist[i+1]=alist[i]
                alist[i]=temp
                
def shortbubble(alist): #if during the bubble sort, there is no change after one pass, then, we know the list is sorted and we are done
    exchanges=True
    a=len(alist)-1
    while a>0 and exchanges:
        exchanges=False
        for i in range(a):
            if alist[i]>alist[i+1]:
                exchanges=True
                temp=alist[i]
                alist[i]=alist[i+1]
                alist[i+1]=temp
        a=a-1
        
#selection sort
def selectionSort(alist):
    for lastspot in range(len(alist)-1,0,-1):
        posOfMax=0
        for i in range(1,lastspot+1):
            if alist[i]>alist[posOfMax]:
                posOfMax=i
        temp=alist[lastspot]
        alist[lastspot]=alist[posOfMax]
        alist[posOfMax]=temp
    
#insertion sort
def inserstionsort(alist):
    for i in range(1,len(alist)):
        for j in (i,0,-1):
            if alist[j]<alist[i-1]:
                alist[j],alist[j-1]=alist[j-1],alist[j]
                
def insertionsort(alist):
    for index in range(1,len(alist)):
        currentvalue=alist[index]
        pos=index
        while pos>0 and currentvalue<alist[pos-1]:
            alist[pos]=alist[pos-1]
            pos-=1
            alist[pos]=currentvalue
            
#shell sort
def shellsort(alist):
    n=len(alist)
    gap=n//2
    while gap>0:
        for i in range(gap,n):
            j=i
            while j>=gap and alist[j]<alist[j-gap]:
                alist[j],alist[j-gap]=alist[j-gap],alist[j]   
                j=j-gap
    gap=gap//2

#merge sort
def mergeSort(alist):
    print('splitting',alist)
    if len(alist)>1:
        mid=len(alist)//2
        lefthalf=alist[:mid]
        righthalf=alist[mid:]
        i=0
        j=0
        k=0
        while i<len(lefthalf) and j<len(righthalf):
            if lefthalf[i]<righthalf[j]:
                alist[k]=lefthalf[i]
                i+=1
            else:
                alist[k]=righthalf[j]
                j+=1
            k+=1
        while i<len(lefthalf):
            alist[k]=lefthalf[i]
            k+=1
            i+=1
        while j<len(righthalf):
            alist[k]=righthalf[i]
            k+=1
            j+=1
    
#quick sort
def quickSort(alist):
    quickSorthelper(alist,0,len(alist)-1)
def quickSorthelper(alist,first,last):
    if first<last:
        splitpoint=partition(alist,first,last)
        quickSorthelper(alist,first,partition-1)
        quickSorthelper(alist,partition+1,last)
def partition(alist,first,last):
    pivotvalue=alist[first]
    leftmark=alist[first+1]
    rightmark=alist[last]
    done=False
    while not done:
        while rightmark>=leftmark and alist[leftmark]<=pivotvalue:
            leftmark+=1
        while rightmark>=leftmark and alist[rightmark]>=pivotvalue:
            rightmark-=1   
        if rightmark<leftmark:
            done=True
        else:
            alist[rightmark],alist[leftmark]=alist[leftmark],alist[rightmark]
    alist[first],alist[rightmark]=alist[rightmark],alist[first]
    return rightmark
